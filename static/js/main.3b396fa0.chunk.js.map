{"version":3,"sources":["components/Header.js","components/Form.js","components/TodoItem.js","components/Todos.js","components/DeleteTodos.js","App.js","serviceWorker.js","index.js"],"names":["headerStyle","background","color","textAlign","padding","Header","react_default","a","createElement","style","Form","state","title","onChange","e","_this","setState","target","value","onSubmit","preventDefault","props","addTodo","this","display","type","flex","className","Component","TodoItem","getStyle","borderBottom","textDecoration","todo","completed","markComplete","bind","id","btnStyle","onClick","deleteTodo","border","borderRadius","cursor","float","Todos","console","log","todos","map","TodoItem_TodoItem","key","DeleteTodos","marginTop","fontSize","delSelected","App","todosArr","newTodo","uuid","v4","push","filter","components_Header","Form_Form","Todos_Todos","DeleteTodos_DeleteTodos","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3b396fa0.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n function Header() {\r\n    return (\r\n        <header style={headerStyle}>\r\n            <h1>Todo List</h1>\r\n        </header>\r\n    )\r\n}\r\nconst headerStyle = {\r\n    background: '#333',\r\n    color: '#fff',\r\n    textAlign: 'center',\r\n    padding: '10px'\r\n}\r\nexport default Header;","import React, { Component } from 'react'\r\n\r\nexport default class Form extends Component {\r\n    state ={\r\n        title: ''\r\n    }\r\n    onChange = (e) =>  this.setState({title: e.target.value});\r\n    onSubmit = (e) =>{\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state.title);\r\n        this.setState({title: ''});\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <form \r\n            onSubmit={this.onSubmit}\r\n            style={{display: 'flex'}}\r\n            >\r\n                <input\r\n                 type=\"text\"\r\n                 style={{flex: '10', padding: '5px'}}\r\n                 value ={this.state.title}\r\n                 onChange={this.onChange}\r\n                 />\r\n                <input\r\n                style={{flex: '1'}}\r\n                type=\"submit\"\r\n                className=\"btn\"\r\n                 />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class TodoItem extends Component {\r\n    getStyle = () =>{\r\n        return {\r\n            background: 'f4f4f4',\r\n            padding: '10px',\r\n            borderBottom: '1px #ccc dotted',\r\n            textDecoration: this.props.todo.completed? 'line-through':'none'\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div style={this.getStyle()}>\r\n                <p>\r\n                    <input \r\n                    type=\"checkbox\"\r\n                    onChange={this.props.markComplete.bind(this, this.props.todo.id)}\r\n                    />\r\n                    {\" \"}\r\n                    {this.props.todo.title}\r\n                    <button\r\n                    style={btnStyle}\r\n                    onClick={this.props.deleteTodo.bind(this,this.props.todo.id)}\r\n                    >X</button>\r\n                </p>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst btnStyle = {\r\n    background: '#ff0000',\r\n    color : '#fff',\r\n    border: 'none',\r\n    padding: ' 5px 9px',\r\n    borderRadius: '50%',\r\n    cursor: 'pointer',\r\n    float: 'right'\r\n}\r\n","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\n\r\nexport default class Todos extends Component {\r\n    render() {\r\n        console.log(this.props.todos);\r\n        return this.props.todos.map((todo) =>(\r\n            <TodoItem \r\n            key={todo.id} \r\n            todo={todo}\r\n            markComplete={this.props.markComplete}\r\n            deleteTodo={this.props.deleteTodo}\r\n            />\r\n            \r\n        ))\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class DeleteTodos extends Component {\r\n    getStyle = () => {\r\n        return{\r\n            marginTop: '100px',\r\n            textAlign: 'center',\r\n            \r\n        }\r\n    }\r\n    render() {\r\n        console.log(this.props.todos[0])\r\n        return (\r\n            <div style={this.getStyle()}>\r\n                { this.props.todos[0]&&\r\n                <button \r\n                className=\"btn\"\r\n                style={{fontSize: '20px'}}\r\n                onClick={this.props.delSelected}\r\n                >Delete Selected Todos</button>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport Header from './components/Header';\nimport Form from './components/Form';\nimport uuid from 'uuid';\nimport Todos from './components/Todos';\nimport DeleteTodos from './components/DeleteTodos';\nimport './App.css';\n\nexport default class App extends Component {\n  state ={\n    todos: []\n  }\n  addTodo = (title) =>{\n    let todosArr = this.state.todos;\n    const newTodo ={\n      id: uuid.v4(),\n      title,\n      completed: false\n    }\n    console.log(newTodo.id);\n    todosArr.push(newTodo);\n    this.setState({ todos: todosArr});\n    console.log(title);\n  }\n  markComplete = (id) =>{\n    this.setState({todos: this.state.todos.map((todo)=>{\n     if(todo.id === id){\n      todo.completed = !todo.completed;\n      }\n      return todo;\n    })\n  })\n  }\n  deleteTodo = (id) =>{\n    this.setState({ todos: this.state.todos.filter(todo => todo.id !== id)});\n  }\n  delSelected = () =>{\n    this.setState({ todos: this.state.todos.filter(todo => todo.completed === false)});\n  }\n  render() {\n    return (\n      <div>\n        <Header />\n        <Form addTodo={this.addTodo} />\n        <Todos \n        markComplete={this.markComplete}\n        todos={this.state.todos}\n        deleteTodo={this.deleteTodo}\n         />\n         <DeleteTodos\n         delSelected={this.delSelected}\n         todos={this.state.todos}\n          />\n      </div>\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}